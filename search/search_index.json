{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#causalprog","title":"causalprog","text":"<p>A Python package for causal modelling and inference with stochastic causal programming</p> <p>This project is developed in collaboration with the Centre for Advanced Research Computing, University College London.</p>"},{"location":"#about","title":"About","text":""},{"location":"#project-team","title":"Project team","text":"<ul> <li>Ricardo Silva (rbas-ucl)</li> <li>Jialin Yu (jialin-yu)</li> <li>Will Graham (willGraham01)</li> <li>Matthew Scroggs (mscroggs)</li> <li>Matt Graham (matt-graham)</li> </ul>"},{"location":"#research-software-engineering-contact","title":"Research software engineering contact","text":"<p>Centre for Advanced Research Computing, University College London (arc.collaborations@ucl.ac.uk)</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<p><code>causalprog</code> requires Python 3.11\u20133.13.</p>"},{"location":"#installation","title":"Installation","text":"<p>We recommend installing in a project specific virtual environment. To install the latest development version of <code>causalprog</code> using <code>pip</code> in the currently active environment run</p> <pre><code>pip install git+https://github.com/UCL/causalprog.git\n</code></pre> <p>Alternatively create a local clone of the repository with</p> <pre><code>git clone https://github.com/UCL/causalprog.git\n</code></pre> <p>and then install in editable mode by running</p> <pre><code>pip install -e .\n</code></pre>"},{"location":"#running-tests","title":"Running tests","text":"<p>Tests can be run across all compatible Python versions in isolated environments using <code>tox</code> by running</p> <pre><code>tox\n</code></pre> <p>To run tests manually in a Python environment with <code>pytest</code> installed run</p> <pre><code>pytest tests\n</code></pre> <p>again from the root of the repository.</p>"},{"location":"#building-documentation","title":"Building documentation","text":"<p>The MkDocs HTML documentation can be built locally by running</p> <pre><code>tox -e docs\n</code></pre> <p>from the root of the repository. The built documentation will be written to <code>site</code>.</p> <p>Alternatively to build and preview the documentation locally, in a Python environment with the optional <code>docs</code> dependencies installed, run</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>This work was funded by Engineering and Physical Sciences Research Council (EPSRC).</p>"},{"location":"LICENSE/","title":"License","text":""},{"location":"LICENSE/#mit-license","title":"MIT License","text":"<p>Copyright (c) 2025 University College London</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api/","title":"API reference","text":"<p>causalprog package.</p>"},{"location":"api/#causalprog.distribution","title":"<code>distribution</code>","text":"<p>Distribution.</p>"},{"location":"api/#causalprog.distribution.base","title":"<code>base</code>","text":"<p>Base class for backend-agnostic distributions.</p>"},{"location":"api/#causalprog.distribution.base.Distribution","title":"<code>Distribution</code>","text":"<p>               Bases: <code>Generic[SupportsSampling]</code></p> <p>A (backend-agnostic) distribution that can be sampled from.</p> Source code in <code>src/causalprog/distribution/base.py</code> <pre><code>class Distribution(Generic[SupportsSampling]):\n    \"\"\"A (backend-agnostic) distribution that can be sampled from.\"\"\"\n\n    _dist: SupportsSampling\n    _backend_translator: SampleTranslator\n\n    @property\n    def _sample(self) -&gt; Callable[..., ArrayLike]:\n        \"\"\"Method for drawing samples from the backend object.\"\"\"\n        return getattr(self._dist, self._backend_translator.backend_method)\n\n    def __init__(\n        self,\n        backend_distribution: SupportsSampling,\n        backend_translator: SampleTranslator | None = None,\n    ) -&gt; None:\n        \"\"\"\n        Create a new Distribution.\n\n        Args:\n            backend_distribution (SupportsSampling): Backend object that supports\n                drawing random samples.\n            backend_translator (SampleTranslator): Translator object mapping backend\n                sampling function to frontend arguments.\n\n        \"\"\"\n        self._dist = backend_distribution\n\n        # Setup sampling calls, and perform one-time check for compatibility\n        self._backend_translator = (\n            backend_translator if backend_translator is not None else SampleTranslator()\n        )\n        self._backend_translator.validate_compatible(backend_distribution)\n\n    def get_dist(self) -&gt; SupportsSampling:\n        \"\"\"Access to the backend distribution.\"\"\"\n        return self._dist\n\n    def sample(self, rng_key: SupportsRNG, sample_shape: ArrayLike = ()) -&gt; ArrayLike:\n        \"\"\"\n        Draw samples from the distribution.\n\n        Args:\n            rng_key (SupportsRNG): Key or seed object to generate random samples.\n            sample_shape (ArrayLike): Shape of samples to draw.\n\n        Returns:\n            ArrayLike: Randomly-drawn samples from the distribution.\n\n        \"\"\"\n        args_to_backend = self._backend_translator.translate_args(\n            rng_key=rng_key, sample_shape=sample_shape\n        )\n        return self._sample(**args_to_backend)\n</code></pre>"},{"location":"api/#causalprog.distribution.base.Distribution._sample","title":"<code>_sample</code>  <code>property</code>","text":"<p>Method for drawing samples from the backend object.</p>"},{"location":"api/#causalprog.distribution.base.Distribution.__init__","title":"<code>__init__(backend_distribution, backend_translator=None)</code>","text":"<p>Create a new Distribution.</p> <p>Parameters:</p> Name Type Description Default <code>backend_distribution</code> <code>SupportsSampling</code> <p>Backend object that supports drawing random samples.</p> required <code>backend_translator</code> <code>SampleTranslator</code> <p>Translator object mapping backend sampling function to frontend arguments.</p> <code>None</code> Source code in <code>src/causalprog/distribution/base.py</code> <pre><code>def __init__(\n    self,\n    backend_distribution: SupportsSampling,\n    backend_translator: SampleTranslator | None = None,\n) -&gt; None:\n    \"\"\"\n    Create a new Distribution.\n\n    Args:\n        backend_distribution (SupportsSampling): Backend object that supports\n            drawing random samples.\n        backend_translator (SampleTranslator): Translator object mapping backend\n            sampling function to frontend arguments.\n\n    \"\"\"\n    self._dist = backend_distribution\n\n    # Setup sampling calls, and perform one-time check for compatibility\n    self._backend_translator = (\n        backend_translator if backend_translator is not None else SampleTranslator()\n    )\n    self._backend_translator.validate_compatible(backend_distribution)\n</code></pre>"},{"location":"api/#causalprog.distribution.base.Distribution.get_dist","title":"<code>get_dist()</code>","text":"<p>Access to the backend distribution.</p> Source code in <code>src/causalprog/distribution/base.py</code> <pre><code>def get_dist(self) -&gt; SupportsSampling:\n    \"\"\"Access to the backend distribution.\"\"\"\n    return self._dist\n</code></pre>"},{"location":"api/#causalprog.distribution.base.Distribution.sample","title":"<code>sample(rng_key, sample_shape=())</code>","text":"<p>Draw samples from the distribution.</p> <p>Parameters:</p> Name Type Description Default <code>rng_key</code> <code>SupportsRNG</code> <p>Key or seed object to generate random samples.</p> required <code>sample_shape</code> <code>ArrayLike</code> <p>Shape of samples to draw.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>ArrayLike</code> <code>ArrayLike</code> <p>Randomly-drawn samples from the distribution.</p> Source code in <code>src/causalprog/distribution/base.py</code> <pre><code>def sample(self, rng_key: SupportsRNG, sample_shape: ArrayLike = ()) -&gt; ArrayLike:\n    \"\"\"\n    Draw samples from the distribution.\n\n    Args:\n        rng_key (SupportsRNG): Key or seed object to generate random samples.\n        sample_shape (ArrayLike): Shape of samples to draw.\n\n    Returns:\n        ArrayLike: Randomly-drawn samples from the distribution.\n\n    \"\"\"\n    args_to_backend = self._backend_translator.translate_args(\n        rng_key=rng_key, sample_shape=sample_shape\n    )\n    return self._sample(**args_to_backend)\n</code></pre>"},{"location":"api/#causalprog.distribution.base.SampleTranslator","title":"<code>SampleTranslator</code>","text":"<p>               Bases: <code>Translator</code></p> <p>Translate methods for sampling from distributions.</p> <p>The <code>Distribution</code> class provides a <code>sample</code> method, that takes <code>rng_key</code> and <code>sample_shape</code> as its arguments. Instances of this class transform the these arguments to those that a backend distribution expects.</p> Source code in <code>src/causalprog/distribution/base.py</code> <pre><code>class SampleTranslator(Translator):\n    \"\"\"\n    Translate methods for sampling from distributions.\n\n    The ``Distribution`` class provides a ``sample`` method, that takes ``rng_key`` and\n    ``sample_shape`` as its arguments. Instances of this class transform the these\n    arguments to those that a backend distribution expects.\n    \"\"\"\n\n    @property\n    def _frontend_method(self) -&gt; str:\n        return \"sample\"\n\n    @property\n    def compulsory_frontend_args(self) -&gt; set[str]:\n        \"\"\"Arguments that are required by the frontend function.\"\"\"\n        return {\"rng_key\", \"sample_shape\"}\n</code></pre>"},{"location":"api/#causalprog.distribution.base.SampleTranslator.compulsory_frontend_args","title":"<code>compulsory_frontend_args</code>  <code>property</code>","text":"<p>Arguments that are required by the frontend function.</p>"},{"location":"api/#causalprog.distribution.family","title":"<code>family</code>","text":"<p>Parametrised groups of <code>Distribution</code>s.</p>"},{"location":"api/#causalprog.distribution.family.DistributionFamily","title":"<code>DistributionFamily</code>","text":"<p>               Bases: <code>Generic[CreatesDistribution]</code></p> <p>A family of <code>Distributions</code>, that share the same parameters.</p> <p>A <code>DistributionFamily</code> is essentially a <code>Distribution</code> that has not yet had its parameter values explicitly specified. Explicit values for the parameters can be passed to a <code>DistributionFamily</code>'s <code>construct</code> method, which will then proceed to construct a <code>Distribution</code> with those parameter values.</p> <p>As an explicit example, the (possibly multivariate) normal distribution is parametrised by two quantities - the (vector of) mean values $\\mu$ and covariates $\\Sigma$. A <code>DistributionFamily</code> represents this general $\\mathcal{N}(\\mu, \\Sigma)$ parametrised form, however without explicit $\\mu$ and $\\Sigma$ values we cannot perform operations like drawing samples. Specifying, for example, $\\mu = 0$ and $\\Sigma = 1$ by invoking <code>.construct(0., 1.)</code> will return a <code>Distribution</code> instance representing $\\mathcal{N}(0., 1.)$, which can then have samples drawn from it.</p> Source code in <code>src/causalprog/distribution/family.py</code> <pre><code>class DistributionFamily(Generic[CreatesDistribution]):\n    r\"\"\"\n    A family of ``Distributions``, that share the same parameters.\n\n    A ``DistributionFamily`` is essentially a ``Distribution`` that has not yet had its\n    parameter values explicitly specified. Explicit values for the parameters can be\n    passed to a ``DistributionFamily``'s ``construct`` method, which will then proceed\n    to construct a ``Distribution`` with those parameter values.\n\n    As an explicit example, the (possibly multivariate) normal distribution is\n    parametrised by two quantities - the (vector of) mean values $\\mu$ and covariates\n    $\\Sigma$. A ``DistributionFamily`` represents this general\n    $\\mathcal{N}(\\mu, \\Sigma)$ parametrised form, however without explicit $\\mu$ and\n    $\\Sigma$ values we cannot perform operations like drawing samples. Specifying, for\n    example, $\\mu = 0$ and $\\Sigma = 1$ by invoking ``.construct(0., 1.)`` will return a\n    ``Distribution`` instance representing $\\mathcal{N}(0., 1.)$, which can then have\n    samples drawn from it.\n    \"\"\"\n\n    _family: CreatesDistribution\n    _family_translator: Translator | None\n\n    @property\n    def _member(self) -&gt; Callable[..., Distribution]:\n        \"\"\"Constructor method for family members, given parameters.\"\"\"\n        return lambda *parameters: Distribution(\n            self._family(*parameters), backend_translator=self._family_translator\n        )\n\n    def __init__(\n        self,\n        backend_family: CreatesDistribution,\n        backend_translator: Translator | None = None,\n    ) -&gt; None:\n        \"\"\"\n        Create a new family of distributions.\n\n        Args:\n            backend_family (CreatesDistribution): Backend callable that assembles the\n                distribution, given explicit parameter values. Currently, this callable\n                can only accept the parameters as a sequence of positional arguments.\n            backend_translator (Translator): ``Translator`` instance that to be\n                passed to the ``Distribution`` constructor.\n\n        \"\"\"\n        self._family = backend_family\n        self._family_translator = backend_translator\n\n    def construct(self, *parameters: ArrayLike) -&gt; Distribution:\n        \"\"\"\n        Create a distribution from an explicit set of parameters.\n\n        Args:\n            *parameters (ArrayLike): Parameters that define a member of this family,\n                passed as sequential arguments.\n\n        \"\"\"\n        return self._member(*parameters)\n</code></pre>"},{"location":"api/#causalprog.distribution.family.DistributionFamily._member","title":"<code>_member</code>  <code>property</code>","text":"<p>Constructor method for family members, given parameters.</p>"},{"location":"api/#causalprog.distribution.family.DistributionFamily.__init__","title":"<code>__init__(backend_family, backend_translator=None)</code>","text":"<p>Create a new family of distributions.</p> <p>Parameters:</p> Name Type Description Default <code>backend_family</code> <code>CreatesDistribution</code> <p>Backend callable that assembles the distribution, given explicit parameter values. Currently, this callable can only accept the parameters as a sequence of positional arguments.</p> required <code>backend_translator</code> <code>Translator</code> <p><code>Translator</code> instance that to be passed to the <code>Distribution</code> constructor.</p> <code>None</code> Source code in <code>src/causalprog/distribution/family.py</code> <pre><code>def __init__(\n    self,\n    backend_family: CreatesDistribution,\n    backend_translator: Translator | None = None,\n) -&gt; None:\n    \"\"\"\n    Create a new family of distributions.\n\n    Args:\n        backend_family (CreatesDistribution): Backend callable that assembles the\n            distribution, given explicit parameter values. Currently, this callable\n            can only accept the parameters as a sequence of positional arguments.\n        backend_translator (Translator): ``Translator`` instance that to be\n            passed to the ``Distribution`` constructor.\n\n    \"\"\"\n    self._family = backend_family\n    self._family_translator = backend_translator\n</code></pre>"},{"location":"api/#causalprog.distribution.family.DistributionFamily.construct","title":"<code>construct(*parameters)</code>","text":"<p>Create a distribution from an explicit set of parameters.</p> <p>Parameters:</p> Name Type Description Default <code>*parameters</code> <code>ArrayLike</code> <p>Parameters that define a member of this family, passed as sequential arguments.</p> <code>()</code> Source code in <code>src/causalprog/distribution/family.py</code> <pre><code>def construct(self, *parameters: ArrayLike) -&gt; Distribution:\n    \"\"\"\n    Create a distribution from an explicit set of parameters.\n\n    Args:\n        *parameters (ArrayLike): Parameters that define a member of this family,\n            passed as sequential arguments.\n\n    \"\"\"\n    return self._member(*parameters)\n</code></pre>"},{"location":"api/#causalprog.distribution.normal","title":"<code>normal</code>","text":"<p>(Multivariate) normal distribution, implemented via <code>jax.random</code> backend.</p>"},{"location":"api/#causalprog.distribution.normal.Normal","title":"<code>Normal</code>","text":"<p>               Bases: <code>Distribution</code></p> <p>A (possibly multivaraiate) normal distribution, $\\mathcal{N}(\\mu, \\Sigma)$.</p> <p>The normal distribution is parametrised by its (vector of) mean value(s) $\\mu$ and (matrix of) covariate(s) $\\Sigma$. These values must be supplied to an instance at upon construction, and can be accessed via the <code>mean</code> ($\\mu$) and <code>cov</code> ($\\Sigma$) attributes, respectively.</p> Source code in <code>src/causalprog/distribution/normal.py</code> <pre><code>class Normal(Distribution):\n    r\"\"\"\n    A (possibly multivaraiate) normal distribution, $\\mathcal{N}(\\mu, \\Sigma)$.\n\n    The normal distribution is parametrised by its (vector of) mean value(s) $\\mu$ and\n    (matrix of) covariate(s) $\\Sigma$. These values must be supplied to an instance at\n    upon construction, and can be accessed via the ``mean`` ($\\mu$) and ``cov``\n    ($\\Sigma$) attributes, respectively.\n\n    \"\"\"\n\n    _dist: _Normal\n\n    @property\n    def mean(self) -&gt; JaxArray:\n        r\"\"\"Mean of the distribution, $\\mu$.\"\"\"\n        return self._dist.mean\n\n    @property\n    def cov(self) -&gt; JaxArray:\n        r\"\"\"Covariate matrix of the distribution, $\\Sigma$.\"\"\"\n        return self._dist.cov\n\n    def __init__(self, mean: ArrayCompatible, cov: ArrayCompatible) -&gt; None:\n        r\"\"\"\n        Create a new normal distribution.\n\n        Args:\n            mean (ArrayCompatible): Vector of mean values, $\\mu$.\n            cov (ArrayCompatible): Matrix of covariates, $\\Sigma$.\n\n        \"\"\"\n        super().__init__(_Normal(mean, cov))\n</code></pre>"},{"location":"api/#causalprog.distribution.normal.Normal.cov","title":"<code>cov</code>  <code>property</code>","text":"<p>Covariate matrix of the distribution, $\\Sigma$.</p>"},{"location":"api/#causalprog.distribution.normal.Normal.mean","title":"<code>mean</code>  <code>property</code>","text":"<p>Mean of the distribution, $\\mu$.</p>"},{"location":"api/#causalprog.distribution.normal.Normal.__init__","title":"<code>__init__(mean, cov)</code>","text":"<p>Create a new normal distribution.</p> <p>Parameters:</p> Name Type Description Default <code>mean</code> <code>ArrayCompatible</code> <p>Vector of mean values, $\\mu$.</p> required <code>cov</code> <code>ArrayCompatible</code> <p>Matrix of covariates, $\\Sigma$.</p> required Source code in <code>src/causalprog/distribution/normal.py</code> <pre><code>def __init__(self, mean: ArrayCompatible, cov: ArrayCompatible) -&gt; None:\n    r\"\"\"\n    Create a new normal distribution.\n\n    Args:\n        mean (ArrayCompatible): Vector of mean values, $\\mu$.\n        cov (ArrayCompatible): Matrix of covariates, $\\Sigma$.\n\n    \"\"\"\n    super().__init__(_Normal(mean, cov))\n</code></pre>"},{"location":"api/#causalprog.distribution.normal.NormalFamily","title":"<code>NormalFamily</code>","text":"<p>               Bases: <code>DistributionFamily</code></p> <p>Constructor class for (possibly multivariate) normal distributions.</p> <p>The multivariate normal distribution is parametrised by a (vector of) mean values $\\mu$, and (matrix of) covariates $\\Sigma$. A <code>NormalFamily</code> represents this family of distributions, $\\mathcal{N}(\\mu, \\Sigma)$. The <code>.construct</code> method can be used to construct a <code>Normal</code> distribution with a fixed mean and covariate matrix.</p> Source code in <code>src/causalprog/distribution/normal.py</code> <pre><code>class NormalFamily(DistributionFamily):\n    r\"\"\"\n    Constructor class for (possibly multivariate) normal distributions.\n\n    The multivariate normal distribution is parametrised by a (vector of) mean values\n    $\\mu$, and (matrix of) covariates $\\Sigma$. A ``NormalFamily`` represents this\n    family of distributions, $\\mathcal{N}(\\mu, \\Sigma)$. The ``.construct`` method can\n    be used to construct a ``Normal`` distribution with a fixed mean and covariate\n    matrix.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Create a family of normal distributions.\"\"\"\n        super().__init__(Normal)\n\n    def construct(self, mean: ArrayCompatible, cov: ArrayCompatible) -&gt; Normal:\n        r\"\"\"\n        Construct a normal distribution with the given mean and covariates.\n\n        Args:\n            mean (ArrayCompatible): Vector of mean values, $\\mu$.\n            cov (ArrayCompatible): Matrix of covariates, $\\Sigma$.\n\n        \"\"\"\n        return super().construct(mean, cov)\n</code></pre>"},{"location":"api/#causalprog.distribution.normal.NormalFamily.__init__","title":"<code>__init__()</code>","text":"<p>Create a family of normal distributions.</p> Source code in <code>src/causalprog/distribution/normal.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Create a family of normal distributions.\"\"\"\n    super().__init__(Normal)\n</code></pre>"},{"location":"api/#causalprog.distribution.normal.NormalFamily.construct","title":"<code>construct(mean, cov)</code>","text":"<p>Construct a normal distribution with the given mean and covariates.</p> <p>Parameters:</p> Name Type Description Default <code>mean</code> <code>ArrayCompatible</code> <p>Vector of mean values, $\\mu$.</p> required <code>cov</code> <code>ArrayCompatible</code> <p>Matrix of covariates, $\\Sigma$.</p> required Source code in <code>src/causalprog/distribution/normal.py</code> <pre><code>def construct(self, mean: ArrayCompatible, cov: ArrayCompatible) -&gt; Normal:\n    r\"\"\"\n    Construct a normal distribution with the given mean and covariates.\n\n    Args:\n        mean (ArrayCompatible): Vector of mean values, $\\mu$.\n        cov (ArrayCompatible): Matrix of covariates, $\\Sigma$.\n\n    \"\"\"\n    return super().construct(mean, cov)\n</code></pre>"},{"location":"api/#causalprog.graph","title":"<code>graph</code>","text":"<p>Creation and storage of graphs.</p>"},{"location":"api/#causalprog.graph.graph","title":"<code>graph</code>","text":"<p>Graph storage.</p>"},{"location":"api/#causalprog.graph.graph.Graph","title":"<code>Graph</code>","text":"<p>A directed acyclic graph that represents a causality tree.</p> Source code in <code>src/causalprog/graph/graph.py</code> <pre><code>class Graph:\n    \"\"\"A directed acyclic graph that represents a causality tree.\"\"\"\n\n    def __init__(self, graph: nx.Graph, label: str) -&gt; None:\n        \"\"\"Initialise a graph from a NetworkX graph.\"\"\"\n        for node in graph.nodes:\n            if not isinstance(node, Node):\n                msg = f\"Invalid node: {node}\"\n                raise TypeError(msg)\n\n        self._label = label\n\n        self._graph = graph.copy()\n        self._nodes = list(graph.nodes())\n        self._depth_first_nodes = list(nx.algorithms.dfs_postorder_nodes(graph))\n\n        outcomes = [node for node in self._nodes if node.is_outcome]\n        if len(outcomes) == 0:\n            msg = \"Cannot create graph with no outcome nodes\"\n            raise ValueError(msg)\n        if len(outcomes) &gt; 1:\n            msg = \"Cannot yet create graph with multiple outcome nodes\"\n            raise ValueError(msg)\n        self._outcome = outcomes[0]\n\n    @property\n    def label(self) -&gt; str:\n        \"\"\"The label of the graph.\"\"\"\n        return self._label\n</code></pre>"},{"location":"api/#causalprog.graph.graph.Graph.label","title":"<code>label</code>  <code>property</code>","text":"<p>The label of the graph.</p>"},{"location":"api/#causalprog.graph.graph.Graph.__init__","title":"<code>__init__(graph, label)</code>","text":"<p>Initialise a graph from a NetworkX graph.</p> Source code in <code>src/causalprog/graph/graph.py</code> <pre><code>def __init__(self, graph: nx.Graph, label: str) -&gt; None:\n    \"\"\"Initialise a graph from a NetworkX graph.\"\"\"\n    for node in graph.nodes:\n        if not isinstance(node, Node):\n            msg = f\"Invalid node: {node}\"\n            raise TypeError(msg)\n\n    self._label = label\n\n    self._graph = graph.copy()\n    self._nodes = list(graph.nodes())\n    self._depth_first_nodes = list(nx.algorithms.dfs_postorder_nodes(graph))\n\n    outcomes = [node for node in self._nodes if node.is_outcome]\n    if len(outcomes) == 0:\n        msg = \"Cannot create graph with no outcome nodes\"\n        raise ValueError(msg)\n    if len(outcomes) &gt; 1:\n        msg = \"Cannot yet create graph with multiple outcome nodes\"\n        raise ValueError(msg)\n    self._outcome = outcomes[0]\n</code></pre>"},{"location":"api/#causalprog.graph.node","title":"<code>node</code>","text":"<p>Graph nodes.</p>"},{"location":"api/#causalprog.graph.node.Distribution","title":"<code>Distribution</code>","text":"<p>Placeholder class.</p> Source code in <code>src/causalprog/graph/node.py</code> <pre><code>class Distribution:\n    \"\"\"Placeholder class.\"\"\"\n</code></pre>"},{"location":"api/#causalprog.graph.node.DistributionFamily","title":"<code>DistributionFamily</code>","text":"<p>Placeholder class.</p> Source code in <code>src/causalprog/graph/node.py</code> <pre><code>class DistributionFamily:\n    \"\"\"Placeholder class.\"\"\"\n</code></pre>"},{"location":"api/#causalprog.graph.node.DistributionNode","title":"<code>DistributionNode</code>","text":"<p>A node containing a distribution family that depends on its parents.</p> Source code in <code>src/causalprog/graph/node.py</code> <pre><code>class DistributionNode:\n    \"\"\"A node containing a distribution family that depends on its parents.\"\"\"\n\n    def __init__(\n        self,\n        family: DistributionFamily,\n        label: str,\n        *,\n        is_outcome: bool = False,\n    ) -&gt; None:\n        \"\"\"Initialise the node.\"\"\"\n        self._dfamily = family\n        self._label = label\n        self._outcome = is_outcome\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Representation.\"\"\"\n        return f'DistributionNode(\"{self._label}\")'\n\n    @property\n    def label(self) -&gt; str:\n        \"\"\"The label of the node.\"\"\"\n        return self._label\n\n    @property\n    def is_root(self) -&gt; bool:\n        \"\"\"Identify if the node is a root.\"\"\"\n        return False\n\n    @property\n    def is_outcome(self) -&gt; bool:\n        \"\"\"Identify if the node is an outcome.\"\"\"\n        return self._outcome\n</code></pre>"},{"location":"api/#causalprog.graph.node.DistributionNode.is_outcome","title":"<code>is_outcome</code>  <code>property</code>","text":"<p>Identify if the node is an outcome.</p>"},{"location":"api/#causalprog.graph.node.DistributionNode.is_root","title":"<code>is_root</code>  <code>property</code>","text":"<p>Identify if the node is a root.</p>"},{"location":"api/#causalprog.graph.node.DistributionNode.label","title":"<code>label</code>  <code>property</code>","text":"<p>The label of the node.</p>"},{"location":"api/#causalprog.graph.node.DistributionNode.__init__","title":"<code>__init__(family, label, *, is_outcome=False)</code>","text":"<p>Initialise the node.</p> Source code in <code>src/causalprog/graph/node.py</code> <pre><code>def __init__(\n    self,\n    family: DistributionFamily,\n    label: str,\n    *,\n    is_outcome: bool = False,\n) -&gt; None:\n    \"\"\"Initialise the node.\"\"\"\n    self._dfamily = family\n    self._label = label\n    self._outcome = is_outcome\n</code></pre>"},{"location":"api/#causalprog.graph.node.DistributionNode.__repr__","title":"<code>__repr__()</code>","text":"<p>Representation.</p> Source code in <code>src/causalprog/graph/node.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Representation.\"\"\"\n    return f'DistributionNode(\"{self._label}\")'\n</code></pre>"},{"location":"api/#causalprog.graph.node.Node","title":"<code>Node</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>An abstract node in a graph.</p> Source code in <code>src/causalprog/graph/node.py</code> <pre><code>@runtime_checkable\nclass Node(Protocol):\n    \"\"\"An abstract node in a graph.\"\"\"\n\n    @property\n    @abstractmethod\n    def label(self) -&gt; str:\n        \"\"\"The label of the node.\"\"\"\n\n    @property\n    @abstractmethod\n    def is_root(self) -&gt; bool:\n        \"\"\"Identify if the node is a root.\"\"\"\n\n    @property\n    @abstractmethod\n    def is_outcome(self) -&gt; bool:\n        \"\"\"Identify if the node is an outcome.\"\"\"\n</code></pre>"},{"location":"api/#causalprog.graph.node.Node.is_outcome","title":"<code>is_outcome</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Identify if the node is an outcome.</p>"},{"location":"api/#causalprog.graph.node.Node.is_root","title":"<code>is_root</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Identify if the node is a root.</p>"},{"location":"api/#causalprog.graph.node.Node.label","title":"<code>label</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>The label of the node.</p>"},{"location":"api/#causalprog.graph.node.RootDistributionNode","title":"<code>RootDistributionNode</code>","text":"<p>A root node containing a distribution family.</p> Source code in <code>src/causalprog/graph/node.py</code> <pre><code>class RootDistributionNode:\n    \"\"\"A root node containing a distribution family.\"\"\"\n\n    def __init__(\n        self,\n        family: DistributionFamily,\n        label: str,\n        *,\n        is_outcome: bool = False,\n    ) -&gt; None:\n        \"\"\"Initialise the node.\"\"\"\n        self._dfamily = family\n        self._label = label\n        self._outcome = is_outcome\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Representation.\"\"\"\n        return f'RootDistributionNode(\"{self._label}\")'\n\n    @property\n    def label(self) -&gt; str:\n        \"\"\"The label of the node.\"\"\"\n        return self._label\n\n    @property\n    def is_root(self) -&gt; bool:\n        \"\"\"Identify if the node is a root.\"\"\"\n        return True\n\n    @property\n    def is_outcome(self) -&gt; bool:\n        \"\"\"Identify if the node is an outcome.\"\"\"\n        return self._outcome\n</code></pre>"},{"location":"api/#causalprog.graph.node.RootDistributionNode.is_outcome","title":"<code>is_outcome</code>  <code>property</code>","text":"<p>Identify if the node is an outcome.</p>"},{"location":"api/#causalprog.graph.node.RootDistributionNode.is_root","title":"<code>is_root</code>  <code>property</code>","text":"<p>Identify if the node is a root.</p>"},{"location":"api/#causalprog.graph.node.RootDistributionNode.label","title":"<code>label</code>  <code>property</code>","text":"<p>The label of the node.</p>"},{"location":"api/#causalprog.graph.node.RootDistributionNode.__init__","title":"<code>__init__(family, label, *, is_outcome=False)</code>","text":"<p>Initialise the node.</p> Source code in <code>src/causalprog/graph/node.py</code> <pre><code>def __init__(\n    self,\n    family: DistributionFamily,\n    label: str,\n    *,\n    is_outcome: bool = False,\n) -&gt; None:\n    \"\"\"Initialise the node.\"\"\"\n    self._dfamily = family\n    self._label = label\n    self._outcome = is_outcome\n</code></pre>"},{"location":"api/#causalprog.graph.node.RootDistributionNode.__repr__","title":"<code>__repr__()</code>","text":"<p>Representation.</p> Source code in <code>src/causalprog/graph/node.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Representation.\"\"\"\n    return f'RootDistributionNode(\"{self._label}\")'\n</code></pre>"},{"location":"api/#causalprog.utils","title":"<code>utils</code>","text":"<p>Utility classes and methods.</p>"},{"location":"api/#causalprog.utils.translator","title":"<code>translator</code>","text":"<p>Helper class to keep the codebase backend-agnostic.</p> <p>Our frontend (or user-facing) classes each use a syntax that applies across the package codebase. By contrast, the various backends that we want to support will have different syntaxes and call signatures for the functions that we want to support. As such, we need a helper class that can store this \"translation\" information, allowing the user to interact with the package in a standard way but also allowing them to choose their own backend if desired.</p>"},{"location":"api/#causalprog.utils.translator.Translator","title":"<code>Translator</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Maps syntax of a backend function to our frontend syntax.</p> <p>Different backends have different syntax for drawing samples from the distributions they support. In order to map these different syntaxes to our backend-agnostic framework, we need a container class to map the names we have chosen for our frontend methods to those used by their corresponding backend method.</p> <p>A <code>Translator</code> allows us to identify whether a user-provided backend object is compatible with one of our frontend wrapper classes (and thus, call signatures). It also allows users to write their own translators for any custom backends that we do not explicitly support.</p> <p>The use case for a <code>Translator</code> is as follows. Suppose that we have a frontend class <code>C</code> that needs to provide a method <code>do_something</code>. <code>C</code> stores a reference to a backend object <code>obj</code> that can provide the functionality of <code>do_something</code> via one of its methods, <code>obj.backend_method</code>. However, there is no guarantee that the signature of <code>do_something</code> maps identically to that of <code>obj.backend_method</code>. A <code>Translator</code> allows us to encode a mapping of <code>obj.backend_method</code>s arguments to those of <code>do_something</code>.</p> Source code in <code>src/causalprog/utils/translator.py</code> <pre><code>class Translator(ABC):\n    \"\"\"\n    Maps syntax of a backend function to our frontend syntax.\n\n    Different backends have different syntax for drawing samples from the distributions\n    they support. In order to map these different syntaxes to our backend-agnostic\n    framework, we need a container class to map the names we have chosen for our\n    frontend methods to those used by their corresponding backend method.\n\n    A ``Translator`` allows us to identify whether a user-provided backend object is\n    compatible with one of our frontend wrapper classes (and thus, call signatures). It\n    also allows users to write their own translators for any custom backends that we do\n    not explicitly support.\n\n    The use case for a ``Translator`` is as follows. Suppose that we have a frontend\n    class ``C`` that needs to provide a method ``do_something``. ``C`` stores a\n    reference to a backend object ``obj`` that can provide the functionality of\n    ``do_something`` via one of its methods, ``obj.backend_method``. However, there is\n    no guarantee that the signature of ``do_something`` maps identically to that of\n    ``obj.backend_method``. A ``Translator`` allows us to encode a mapping of\n    ``obj.backend_method``s arguments to those of ``do_something``.\n    \"\"\"\n\n    backend_method: str\n    corresponding_backend_arg: dict[str, str]\n\n    @property\n    @abstractmethod\n    def _frontend_method(self) -&gt; str:\n        \"\"\"Name of the frontend method that the backend is to be translated into.\"\"\"\n\n    @property\n    @abstractmethod\n    def compulsory_frontend_args(self) -&gt; set[str]:\n        \"\"\"Arguments that are required by the frontend function.\"\"\"\n\n    @property\n    def compulsory_backend_args(self) -&gt; set[str]:\n        \"\"\"Arguments that are required to be taken by the backend function.\"\"\"\n        return {\n            self.corresponding_backend_arg[arg_name]\n            for arg_name in self.compulsory_frontend_args\n        }\n\n    def __init__(\n        self, backend_method: str | None = None, **front_args_to_back_args: str\n    ) -&gt; None:\n        \"\"\"\n        Create a new Translator.\n\n        Args:\n            backend_method (str): Name of the backend method that the instance\n                translates.\n            **front_args_to_back_args (str): Mapping of frontend argument names to the\n                corresponding backend argument names.\n\n        \"\"\"\n        # Assume backend name is identical to frontend name if not provided explicitly\n        self.backend_method = (\n            backend_method if backend_method else self._frontend_method\n        )\n\n        # This should really be immutable after we fill defaults!\n        self.corresponding_backend_arg = dict(front_args_to_back_args)\n        # Assume compulsory frontend args that are not given translations\n        # retain their name in the backend.\n        for arg in self.compulsory_frontend_args:\n            if arg not in self.corresponding_backend_arg:\n                self.corresponding_backend_arg[arg] = arg\n\n    def translate_args(self, **kwargs: Any) -&gt; dict[str, Any]:  # noqa: ANN401\n        \"\"\"\n        Translate frontend arguments (with values) to backend arguments.\n\n        Essentially transforms frontend keyword arguments into their backend keyword\n        arguments, preserving the value assigned to each argument.\n        \"\"\"\n        return {\n            self.corresponding_backend_arg[arg_name]: arg_value\n            for arg_name, arg_value in kwargs.items()\n        }\n\n    def validate_compatible(self, obj: object) -&gt; None:\n        \"\"\"\n        Determine if ``obj`` provides a compatible backend method.\n\n        ``obj`` must provide a callable whose name matches ``self.backend_method``,\n        and the callable referenced must take arguments matching the names specified in\n        ``self.compulsory_backend_args``.\n\n        Args:\n            obj (object): Object to check possesses a method that can be translated into\n                frontend syntax.\n\n        \"\"\"\n        # Check that obj does provide a method of matching name\n        if not hasattr(obj, self.backend_method):\n            msg = f\"{obj} has no method '{self.backend_method}'.\"\n            raise AttributeError(msg)\n        if not callable(getattr(obj, self.backend_method)):\n            msg = f\"'{self.backend_method}' attribute of {obj} is not callable.\"\n            raise TypeError(msg)\n\n        # Check that this method will be callable with the information given.\n        method_params = inspect.signature(getattr(obj, self.backend_method)).parameters\n        # The arguments that will be passed are actually taken by the method.\n        for compulsory_arg in self.compulsory_backend_args:\n            if compulsory_arg not in method_params:\n                msg = (\n                    f\"'{self.backend_method}' does not \"\n                    f\"take argument '{compulsory_arg}'.\"\n                )\n                raise TypeError(msg)\n        # The method does not _require_ any additional arguments\n        method_requires = {\n            name for name, p in method_params.items() if p.default is p.empty\n        }\n        if not method_requires.issubset(self.compulsory_backend_args):\n            args_not_accounted_for = method_requires - self.compulsory_backend_args\n            raise TypeError(\n                f\"'{self.backend_method}' not provided compulsory arguments \"\n                \"(missing \" + \", \".join(args_not_accounted_for) + \")\"\n            )\n</code></pre>"},{"location":"api/#causalprog.utils.translator.Translator._frontend_method","title":"<code>_frontend_method</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Name of the frontend method that the backend is to be translated into.</p>"},{"location":"api/#causalprog.utils.translator.Translator.compulsory_backend_args","title":"<code>compulsory_backend_args</code>  <code>property</code>","text":"<p>Arguments that are required to be taken by the backend function.</p>"},{"location":"api/#causalprog.utils.translator.Translator.compulsory_frontend_args","title":"<code>compulsory_frontend_args</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Arguments that are required by the frontend function.</p>"},{"location":"api/#causalprog.utils.translator.Translator.__init__","title":"<code>__init__(backend_method=None, **front_args_to_back_args)</code>","text":"<p>Create a new Translator.</p> <p>Parameters:</p> Name Type Description Default <code>backend_method</code> <code>str</code> <p>Name of the backend method that the instance translates.</p> <code>None</code> <code>**front_args_to_back_args</code> <code>str</code> <p>Mapping of frontend argument names to the corresponding backend argument names.</p> <code>{}</code> Source code in <code>src/causalprog/utils/translator.py</code> <pre><code>def __init__(\n    self, backend_method: str | None = None, **front_args_to_back_args: str\n) -&gt; None:\n    \"\"\"\n    Create a new Translator.\n\n    Args:\n        backend_method (str): Name of the backend method that the instance\n            translates.\n        **front_args_to_back_args (str): Mapping of frontend argument names to the\n            corresponding backend argument names.\n\n    \"\"\"\n    # Assume backend name is identical to frontend name if not provided explicitly\n    self.backend_method = (\n        backend_method if backend_method else self._frontend_method\n    )\n\n    # This should really be immutable after we fill defaults!\n    self.corresponding_backend_arg = dict(front_args_to_back_args)\n    # Assume compulsory frontend args that are not given translations\n    # retain their name in the backend.\n    for arg in self.compulsory_frontend_args:\n        if arg not in self.corresponding_backend_arg:\n            self.corresponding_backend_arg[arg] = arg\n</code></pre>"},{"location":"api/#causalprog.utils.translator.Translator.translate_args","title":"<code>translate_args(**kwargs)</code>","text":"<p>Translate frontend arguments (with values) to backend arguments.</p> <p>Essentially transforms frontend keyword arguments into their backend keyword arguments, preserving the value assigned to each argument.</p> Source code in <code>src/causalprog/utils/translator.py</code> <pre><code>def translate_args(self, **kwargs: Any) -&gt; dict[str, Any]:  # noqa: ANN401\n    \"\"\"\n    Translate frontend arguments (with values) to backend arguments.\n\n    Essentially transforms frontend keyword arguments into their backend keyword\n    arguments, preserving the value assigned to each argument.\n    \"\"\"\n    return {\n        self.corresponding_backend_arg[arg_name]: arg_value\n        for arg_name, arg_value in kwargs.items()\n    }\n</code></pre>"},{"location":"api/#causalprog.utils.translator.Translator.validate_compatible","title":"<code>validate_compatible(obj)</code>","text":"<p>Determine if <code>obj</code> provides a compatible backend method.</p> <p><code>obj</code> must provide a callable whose name matches <code>self.backend_method</code>, and the callable referenced must take arguments matching the names specified in <code>self.compulsory_backend_args</code>.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> <p>Object to check possesses a method that can be translated into frontend syntax.</p> required Source code in <code>src/causalprog/utils/translator.py</code> <pre><code>def validate_compatible(self, obj: object) -&gt; None:\n    \"\"\"\n    Determine if ``obj`` provides a compatible backend method.\n\n    ``obj`` must provide a callable whose name matches ``self.backend_method``,\n    and the callable referenced must take arguments matching the names specified in\n    ``self.compulsory_backend_args``.\n\n    Args:\n        obj (object): Object to check possesses a method that can be translated into\n            frontend syntax.\n\n    \"\"\"\n    # Check that obj does provide a method of matching name\n    if not hasattr(obj, self.backend_method):\n        msg = f\"{obj} has no method '{self.backend_method}'.\"\n        raise AttributeError(msg)\n    if not callable(getattr(obj, self.backend_method)):\n        msg = f\"'{self.backend_method}' attribute of {obj} is not callable.\"\n        raise TypeError(msg)\n\n    # Check that this method will be callable with the information given.\n    method_params = inspect.signature(getattr(obj, self.backend_method)).parameters\n    # The arguments that will be passed are actually taken by the method.\n    for compulsory_arg in self.compulsory_backend_args:\n        if compulsory_arg not in method_params:\n            msg = (\n                f\"'{self.backend_method}' does not \"\n                f\"take argument '{compulsory_arg}'.\"\n            )\n            raise TypeError(msg)\n    # The method does not _require_ any additional arguments\n    method_requires = {\n        name for name, p in method_params.items() if p.default is p.empty\n    }\n    if not method_requires.issubset(self.compulsory_backend_args):\n        args_not_accounted_for = method_requires - self.compulsory_backend_args\n        raise TypeError(\n            f\"'{self.backend_method}' not provided compulsory arguments \"\n            \"(missing \" + \", \".join(args_not_accounted_for) + \")\"\n        )\n</code></pre>"}]}